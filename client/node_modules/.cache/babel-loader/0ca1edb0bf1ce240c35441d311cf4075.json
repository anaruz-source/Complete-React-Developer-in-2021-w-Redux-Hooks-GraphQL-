{"ast":null,"code":"import { takeLatest, put, all, call, takeEvery } from 'redux-saga/effects';\nimport { getFirestore, getDoc, doc, setDoc, addDoc, collection, getDocsFromServer, getDocs, query, writeBatch } from 'firebase/firestore';\nimport { signInWithPopup, signInWithEmailAndPassword, signOut, createUserWithEmailAndPassword } from 'firebase/auth';\nimport UserActionTypes from './user.types';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInFailure, signInSuccess, signOutFailure, signOutSuccess, signUpFailure, signUpSuccess } from './user.actions';\nimport { emptyCart } from '../cart/cart.actions';\n\nfunction* getSnapFromUserAuth(userAuth, additionalData) {\n  const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n  const snap = yield getDoc(userRef);\n  yield put(signInSuccess({\n    id: snap.id,\n    ...snap.data()\n  }));\n}\n\nfunction* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield signInWithPopup(auth, googleProvider);\n    yield getSnapFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield signInWithEmailAndPassword(auth, email, password);\n    yield getSnapFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapFromUserAuth(userAuth);\n  } catch (error) {}\n}\n\nfunction* signOutListener() {\n  try {\n    yield signOut(auth);\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n\nfunction* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield createUserWithEmailAndPassword(auth, email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n\nfunction* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  try {\n    yield getSnapFromUserAuth(user, additionalData);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // Listeners \n\n\nfunction* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nfunction* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nfunction* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nfunction* onSignOut() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOutListener);\n}\n\nfunction* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n\nfunction* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOut), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/home/anaruz/www/Complete-React-Developer-in-2021-w-Redux-Hooks-GraphQL-/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","takeEvery","getFirestore","getDoc","doc","setDoc","addDoc","collection","getDocsFromServer","getDocs","query","writeBatch","signInWithPopup","signInWithEmailAndPassword","signOut","createUserWithEmailAndPassword","UserActionTypes","googleProvider","auth","createUserProfileDocument","getCurrentUser","signInFailure","signInSuccess","signOutFailure","signOutSuccess","signUpFailure","signUpSuccess","emptyCart","getSnapFromUserAuth","userAuth","additionalData","userRef","snap","id","data","signInWithGoogle","user","error","signInWithEmail","payload","email","password","isUserAuthenticated","signOutListener","signUp","displayName","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOut","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest, put, all, call, takeEvery} from 'redux-saga/effects'\n\nimport { getFirestore,  getDoc, doc, setDoc, addDoc, collection,  getDocsFromServer, getDocs,  query, writeBatch} from 'firebase/firestore';\nimport { signInWithPopup, signInWithEmailAndPassword, signOut, createUserWithEmailAndPassword} from 'firebase/auth';\n\n\n\nimport UserActionTypes from './user.types'\n\n\nimport { googleProvider, auth , createUserProfileDocument, getCurrentUser} from '../../firebase/firebase.utils'\nimport { signInFailure, signInSuccess, signOutFailure, signOutSuccess, signUpFailure, signUpSuccess } from './user.actions';\nimport { emptyCart } from '../cart/cart.actions';\n\n\nfunction* getSnapFromUserAuth (userAuth, additionalData) {\n\n    const userRef =  yield call(createUserProfileDocument, userAuth, additionalData)\n\n    const snap = yield getDoc(userRef)\n\n   yield put(signInSuccess({id: snap.id, ...snap.data()}))\n}\n\n function* signInWithGoogle(){\n\n\n    try {\n   \n      const {user} = yield  signInWithPopup(auth, googleProvider);\n\n      yield getSnapFromUserAuth(user)\n        \n\n    } catch(error) {\n\n       yield put(signInFailure(error))\n    }\n}\n\n\nfunction* signInWithEmail({payload:{email, password}}){\n\n    try{\n      \n        const {user} = yield signInWithEmailAndPassword(auth, email, password)\n        \n        yield getSnapFromUserAuth(user)\n\n\n    }catch(error){\n          \n        yield put(signInFailure(error))\n\n    }\n}\n\n\nfunction* isUserAuthenticated() {\n    \n  try {\n     \n\n    const userAuth = yield getCurrentUser()\n\n    if(!userAuth) return;\n\n    yield getSnapFromUserAuth(userAuth)\n\n  } catch(error) {\n\n\n  }\n}\n\nfunction* signOutListener(){\n\n    try{\n    \n\n        yield signOut(auth)\n        yield put(signOutSuccess())\n\n    }catch(error) {\n\n        yield put(signOutFailure(error))\n    }\n}\n\nfunction* signUp({payload:{email, password, displayName}}){\n\n  try {\n\n    const {user} = yield createUserWithEmailAndPassword(auth, email, password)\n\n    yield put(signUpSuccess({user, additionalData:{displayName}}))\n\n    \n  } catch (error) {\n    \n    yield put(signUpFailure(error))\n  }\n}\n\nfunction* signInAfterSignUp({payload:{user, additionalData}}){\n\n  try {\n    \n    yield getSnapFromUserAuth(user, additionalData)\n\n  } catch (error) {\n    \n    yield put(signInFailure(error))\n  }\n\n\n  \n}\n\n// Listeners \n\n function* onGoogleSignInStart(){\n\n   yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nfunction* onEmailSignInStart(){\n\n   yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nfunction* onCheckUserSession(){\n\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated )\n}\n\nfunction* onSignOut(){\n\nyield takeLatest(UserActionTypes.SIGN_OUT_START, signOutListener)\n}\n\n\nfunction* onSignUpStart(){\n\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\n}\n\nfunction* onSignUpSuccess(){\n\n\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp)\n\n}\n\n\nexport function* userSagas (){\n\n  yield all([\n      call(onGoogleSignInStart),\n      call(onEmailSignInStart),\n      call(onCheckUserSession),\n      call(onSignOut),\n      call(onSignUpStart),\n      call(onSignUpSuccess)\n      \n    ])\n}"]},"metadata":{},"sourceType":"module"}