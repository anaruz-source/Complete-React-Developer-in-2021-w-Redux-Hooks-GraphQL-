{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getFirestore, getDoc, doc, setDoc, addDoc, collection, getDocsFromServer, getDocs, query, writeBatch } from 'firebase/firestore';\nimport { getAuth, GoogleAuthProvider, signInWithPopup, onAuthStateChanged } from 'firebase/auth'; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBj8ZVOjlRi9tQazf___x6Wax3xzJKrFFU\",\n  authDomain: \"crwnbdd.firebaseapp.com\",\n  projectId: \"crwnbdd\",\n  storageBucket: \"crwnbdd.appspot.com\",\n  messagingSenderId: \"124300276673\",\n  appId: \"1:124300276673:web:fa5c9aeed36751e35a3540\"\n};\ninitializeApp(firebaseConfig);\nexport const auth = getAuth();\nexport const googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => signInWithPopup(auth, googleProvider);\nexport const firestore = getFirestore();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = doc(firestore, 'users', `${userAuth.uid}`);\n  const userSnap = await getDoc(userRef);\n\n  if (!userSnap.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionsAndDocuments = async (key, objs) => {\n  const collectionRef = collection(firestore, key);\n  const snap = await getDocsFromServer(query(collectionRef));\n  const batch = writeBatch(firestore);\n  if (!snap.empty) return collectionRef;\n  objs.forEach(async obj => {\n    try {\n      const docRef = await addDoc(collectionRef, obj);\n      batch.set(docRef);\n    } catch (e) {\n      console.error(e);\n    }\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  let transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  transformedCollection = transformedCollection.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection;\n    return acc;\n  }, {});\n  console.log(transformedCollection);\n  return transformedCollection;\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscriberFromAuth = onAuthStateChanged(auth, userAuth => {\n      unsubscriberFromAuth();\n      resolve(userAuth);\n    }, reject);\n  });\n};","map":{"version":3,"sources":["/home/anaruz/www/Complete-React-Developer-in-2021-w-Redux-Hooks-GraphQL-/client/src/firebase/firebase.utils.js"],"names":["initializeApp","getFirestore","getDoc","doc","setDoc","addDoc","collection","getDocsFromServer","getDocs","query","writeBatch","getAuth","GoogleAuthProvider","signInWithPopup","onAuthStateChanged","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","googleProvider","setCustomParameters","prompt","signInWithGoogle","firestore","createUserProfileDocument","userAuth","additionalData","userRef","uid","userSnap","exists","displayName","email","createdAt","Date","error","console","log","message","addCollectionsAndDocuments","key","objs","collectionRef","snap","batch","empty","forEach","obj","docRef","set","e","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","acc","getCurrentUser","Promise","resolve","reject","unsubscriberFromAuth"],"mappings":"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","sourcesContent":["import {initializeApp} from 'firebase/app';\nimport { getFirestore,  getDoc, doc, setDoc, addDoc, collection,  getDocsFromServer, getDocs,  query, writeBatch} from 'firebase/firestore';\nimport {getAuth, GoogleAuthProvider, signInWithPopup, onAuthStateChanged} from 'firebase/auth';\n\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBj8ZVOjlRi9tQazf___x6Wax3xzJKrFFU\",\n  authDomain: \"crwnbdd.firebaseapp.com\",\n  projectId: \"crwnbdd\",\n  storageBucket: \"crwnbdd.appspot.com\",\n  messagingSenderId: \"124300276673\",\n  appId: \"1:124300276673:web:fa5c9aeed36751e35a3540\"\n};\ninitializeApp(firebaseConfig);\n\nexport const auth = getAuth();\n\n\nexport const googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({prompt: 'select_account'});\n\n\n\nexport const signInWithGoogle = () => signInWithPopup(auth, googleProvider);\n\n\nexport const firestore =  getFirestore();\n\n\nexport const createUserProfileDocument= async (userAuth, additionalData)=>{\n\nif(!userAuth) return;\n\nconst userRef = doc(firestore, 'users', `${userAuth.uid}`);\n\nconst userSnap = await getDoc(userRef);\n\n\n\nif(!userSnap.exists()) {\n\n\n\n  const {displayName, email}= userAuth;\n  const createdAt = new Date();\n  try {\n\n\n   await setDoc(userRef,{\n      displayName,\n      email,\n      createdAt,\n      ...additionalData\n    })\n\n\n  } catch(error){\n\n\n    console.log('error creating user', error.message);\n  }\n\n}\n\nreturn userRef;\n\n\n}\n\n\n\nexport const addCollectionsAndDocuments = async (key, objs) => {\n\n  const collectionRef = collection(firestore, key);\n\n  \n\n  const snap = await getDocsFromServer(query(collectionRef))\n\nconst batch = writeBatch(firestore);\n  if(!snap.empty) return collectionRef\n \n  \n   \n    objs.forEach( async(obj) => {\n\n      try{\n\n        const docRef = await addDoc(collectionRef, obj);\n      \n       batch.set( docRef)\n\n\n      }catch( e){\n\n         console.error(e)\n      }\n      \n     \n  \n    })\n\n    return await batch.commit();\n \n}\n\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n\n  let  transformedCollection = collections.docs.map(doc => {\n\n    const {title, items} = doc.data()\n\n    return {\n\n      routeName : encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    }\n  })\n\n  transformedCollection = transformedCollection.reduce(\n    (acc, collection) => { \n      acc[collection.title.toLowerCase()] = collection;\n      return acc\n    },\n     {})\n\n  console.log(transformedCollection)\n  return transformedCollection\n}\n\n\nexport const getCurrentUser = () => {\n\n    return new Promise((resolve, reject) =>{\n\n        const unsubscriberFromAuth = onAuthStateChanged(auth, userAuth => {\n\n            unsubscriberFromAuth()\n\n            resolve(userAuth)\n        }, reject )\n    })\n}"]},"metadata":{},"sourceType":"module"}